# BerthCare Local Development Environment
# Docker Compose configuration for PostgreSQL, Redis, and LocalStack (S3 emulation)
#
# Task E4: Set up local development environment
# Create Docker Compose file for local development: PostgreSQL 15, Redis 7, LocalStack (S3 emulation)
# Reference: project-documentation/task-plan.md - Phase E â€“ Environment & Tooling
#
# Quick Start:
#   1. Copy .env.example to .env
#   2. Run: docker-compose up -d
#   3. Services will be available at:
#      - PostgreSQL: localhost:5432
#      - Redis: localhost:6379
#      - LocalStack (S3): localhost:4566
#      - PgAdmin: http://localhost:5050
#      - Redis Commander: http://localhost:8081

services:
  # PostgreSQL 15 - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: berthcare-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-berthcare_dev}
      POSTGRES_USER: ${POSTGRES_USER:-berthcare}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-berthcare_dev_password}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - './scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro'
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-berthcare} -d ${POSTGRES_DB:-berthcare_dev}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - berthcare-network

  # Redis 7 - Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: berthcare-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-berthcare_redis_password} --appendonly yes
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-berthcare_redis_password}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'PING']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - berthcare-network

  # LocalStack - AWS S3 Emulation for Local Development
  localstack:
    image: localstack/localstack:latest
    container_name: berthcare-localstack
    restart: unless-stopped
    environment:
      SERVICES: ${LOCALSTACK_SERVICES:-s3}
      DEBUG: ${LOCALSTACK_DEBUG:-0}
      AWS_DEFAULT_REGION: ${AWS_REGION:-ca-central-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
      DOCKER_HOST: unix:///var/run/docker.sock
    ports:
      - '${LOCALSTACK_PORT:-4566}:4566'
    volumes:
      - './scripts/init-localstack.sh:/etc/localstack/init/ready.d/init-localstack.sh:ro'
      - localstack_data:/var/lib/localstack
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4566/_localstack/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - berthcare-network

  # PgAdmin - PostgreSQL Web UI (Optional Development Tool)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: berthcare-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@berthcare.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - berthcare-network
    profiles:
      - tools

  # Redis Commander - Redis Web UI (Optional Development Tool)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: berthcare-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-berthcare_redis_password}
    ports:
      - '${REDIS_COMMANDER_PORT:-8081}:8081'
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - berthcare-network
    profiles:
      - tools

# Persistent volumes for data storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  localstack_data:
    driver: local

# Network for service communication
networks:
  berthcare-network:
    driver: bridge
